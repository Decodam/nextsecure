generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  isActive      Boolean         @default(false)
  role          String          @default("user")
  credential    Credential?
  accounts      Account[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@index([email])  // Index for faster lookup by email
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId, provider])  // Index for faster lookup by userId and provider
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  createdAt  DateTime @default(now())

  @@id([identifier, token])
  @@index([identifier])  // Index for faster lookup by identifier
}

model Preregistration {
  id            String          @id @default(cuid())
  fullName      String
  email         String          @unique
  passwordHash  String
  createdAt     DateTime        @default(now())
  expiresAt     DateTime?       // Optional: Set an expiration time for preregistration entries

  @@index([email])  // Index for faster lookup by email
}

model Credential {
  id            String          @id @default(cuid())
  userId        String          @unique
  passwordHash  String

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])  // Index for faster lookup by userId
}